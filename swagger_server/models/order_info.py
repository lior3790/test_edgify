# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.order_info_orders import OrderInfoOrders  # noqa: F401,E501
from swagger_server import util


class OrderInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, amount: int=None, price: int=None, total: int=None, orders: List[OrderInfoOrders]=None):  # noqa: E501
        """OrderInfo - a model defined in Swagger

        :param status: The status of this OrderInfo.  # noqa: E501
        :type status: str
        :param amount: The amount of this OrderInfo.  # noqa: E501
        :type amount: int
        :param price: The price of this OrderInfo.  # noqa: E501
        :type price: int
        :param total: The total of this OrderInfo.  # noqa: E501
        :type total: int
        :param orders: The orders of this OrderInfo.  # noqa: E501
        :type orders: List[OrderInfoOrders]
        """
        self.swagger_types = {
            'status': str,
            'amount': int,
            'price': int,
            'total': int,
            'orders': List[OrderInfoOrders]
        }

        self.attribute_map = {
            'status': 'status',
            'amount': 'amount',
            'price': 'price',
            'total': 'total',
            'orders': 'orders'
        }
        self._status = status
        self._amount = amount
        self._price = price
        self._total = total
        self._orders = orders

    @classmethod
    def from_dict(cls, dikt) -> 'OrderInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrderInfo of this OrderInfo.  # noqa: E501
        :rtype: OrderInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this OrderInfo.

        Order Status  # noqa: E501

        :return: The status of this OrderInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this OrderInfo.

        Order Status  # noqa: E501

        :param status: The status of this OrderInfo.
        :type status: str
        """
        allowed_values = ["Executed", "Denied", ""]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def amount(self) -> int:
        """Gets the amount of this OrderInfo.


        :return: The amount of this OrderInfo.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this OrderInfo.


        :param amount: The amount of this OrderInfo.
        :type amount: int
        """

        self._amount = amount

    @property
    def price(self) -> int:
        """Gets the price of this OrderInfo.


        :return: The price of this OrderInfo.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this OrderInfo.


        :param price: The price of this OrderInfo.
        :type price: int
        """

        self._price = price

    @property
    def total(self) -> int:
        """Gets the total of this OrderInfo.


        :return: The total of this OrderInfo.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this OrderInfo.


        :param total: The total of this OrderInfo.
        :type total: int
        """

        self._total = total

    @property
    def orders(self) -> List[OrderInfoOrders]:
        """Gets the orders of this OrderInfo.


        :return: The orders of this OrderInfo.
        :rtype: List[OrderInfoOrders]
        """
        return self._orders

    @orders.setter
    def orders(self, orders: List[OrderInfoOrders]):
        """Sets the orders of this OrderInfo.


        :param orders: The orders of this OrderInfo.
        :type orders: List[OrderInfoOrders]
        """

        self._orders = orders
